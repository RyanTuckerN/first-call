import fetch from "node-fetch";
import { properize } from "./helpers.js";
import bcrypt from "bcryptjs";
const { hashSync } = bcrypt;
const API_URL = 'http://localhost:3333'

const tokens = [];
const tokenHash = {};
const userSeeder = async () => {
  try {
    for (let i = 1; i <= 5; i++) {
      const randomUser = await fetch(`https://randomuser.me/api/`);
      const randomJson = await randomUser.json();
      const randomName =
        randomJson.results[0].name.first +
        " " +
        randomJson.results[0].name.last;
      // console.log(randomJson);

      const userBody = {
        email: `user${i}@email.com`,
        password: "password",
        name: randomName,
      };
      const userResults = await fetch(`${API_URL}/user/signup`, {
        method: "POST",
        mode: "cors",
        body: JSON.stringify(userBody),
        headers: {
          "Content-type": "application/json",
        },
      });
      const userJson = await userResults.json();
      // console.log(userJson);
      const { sessionToken, user } = userJson;
      console.log(userJson);
      // const { id, email } = user;
      tokens.push({ id: user.id, sessionToken });
      tokenHash[i] = sessionToken;

      for (let j = 0; j < 4; j++) {
        const randomNum = Math.round(Math.random() * 500);

        const gigBody = {
          description: `${properize(adjectives[randomNum * 2])} concert`,
          date: "2021-12-24 18:30:00.543-04",
          payment: randomNum - (randomNum % 25) + 50,
          location: `${randomNum + 1200} ${properize(
            adjectives[randomNum]
          )} Street`,
          optionalInfo: {
            attire: "Business casual",
            meal: "Box lunch",
            rehearsal: "2 weeks before",
          },
        };

        const gigResults = await fetch(`${API_URL}/gig/`, {
          method: "POST",
          mode: "cors",
          body: JSON.stringify(gigBody),
          headers: {
            "Content-type": "application/json",
            Authorization: sessionToken,
          },
        });
        const gigJson = await gigResults.json();
        // console.log(gigJson.newGig);

        const gigId = gigJson.newGig.id;

        const callStackBody = {
          stackTable: {
            saxophone: [
              `user${Math.round(Math.random() * 6)}@email.com`,
              `user${Math.round(Math.random() * 6)}@email.com`,
            ],
            drums: [
              `user${Math.round(Math.random() * 6)}@email.com`,
              `user${Math.round(Math.random() * 6)}@email.com`,
            ],
            accordian: [
              `user${Math.round(Math.random() * 6)}@email.com`,
              `user${Math.round(Math.random() * 6)}@email.com`,
            ],
          },
        };
        const callStackResults = await fetch(
          `${API_URL}/gig/${gigId}/callStack`,
          {
            method: "POST",
            mode: "cors",
            body: JSON.stringify(callStackBody),
            headers: {
              "Content-type": "application/json",
              Authorization: sessionToken,
            },
          }
        );
        const stackJson = await callStackResults.json();
        // console.log(stackJson);
        console.log(i, j);
      }
    }
  } catch (err) {
    console.log(err);
  } finally {
    console.log("✔✔✔ users, gigs and callstacks created");
  }
};

const adjectives = [
  "aback",
  "abaft",
  "abandoned",
  "abashed",
  "aberrant",
  "abhorrent",
  "abiding",
  "abject",
  "ablaze",
  "able",
  "abnormal",
  "aboriginal",
  "abortive",
  "abounding",
  "abrasive",
  "abrupt",
  "absent",
  "absorbed",
  "absorbing",
  "abstracted",
  "absurd",
  "abundant",
  "abusive",
  "acceptable",
  "accessible",
  "accidental",
  "accurate",
  "acid",
  "acidic",
  "acoustic",
  "acrid",
  "adamant",
  "adaptable",
  "addicted",
  "adhesive",
  "adjoining",
  "adorable",
  "adventurous",
  "afraid",
  "aggressive",
  "agonizing",
  "agreeable",
  "ahead",
  "ajar",
  "alert",
  "alike",
  "alive",
  "alleged",
  "alluring",
  "aloof",
  "amazing",
  "ambiguous",
  "ambitious",
  "amuck",
  "amused",
  "amusing",
  "ancient",
  "angry",
  "animated",
  "annoyed",
  "annoying",
  "anxious",
  "apathetic",
  "aquatic",
  "aromatic",
  "arrogant",
  "ashamed",
  "aspiring",
  "assorted",
  "astonishing",
  "attractive",
  "auspicious",
  "automatic",
  "available",
  "average",
  "aware",
  "awesome",
  "axiomatic",
  "bad",
  "barbarous",
  "bashful",
  "bawdy",
  "beautiful",
  "befitting",
  "belligerent",
  "beneficial",
  "bent",
  "berserk",
  "bewildered",
  "big",
  "billowy",
  "bite-sized",
  "bitter",
  "bizarre",
  "black",
  "black-and-white",
  "bloody",
  "blue",
  "blue-eyed",
  "blushing",
  "boiling",
  "boorish",
  "bored",
  "boring",
  "bouncy",
  "boundless",
  "brainy",
  "brash",
  "brave",
  "brawny",
  "breakable",
  "breezy",
  "brief",
  "bright",
  "broad",
  "broken",
  "brown",
  "bumpy",
  "burly",
  "bustling",
  "busy",
  "cagey",
  "calculating",
  "callous",
  "calm",
  "capable",
  "capricious",
  "careful",
  "careless",
  "caring",
  "cautious",
  "ceaseless",
  "certain",
  "changeable",
  "charming",
  "cheap",
  "cheerful",
  "chemical",
  "chief",
  "childlike",
  "chilly",
  "chivalrous",
  "chubby",
  "chunky",
  "clammy",
  "classy",
  "clean",
  "clear",
  "clever",
  "cloistered",
  "cloudy",
  "closed",
  "clumsy",
  "cluttered",
  "coherent",
  "cold",
  "colorful",
  "colossal",
  "combative",
  "comfortable",
  "common",
  "complete",
  "complex",
  "concerned",
  "condemned",
  "confused",
  "conscious",
  "cooing",
  "cool",
  "cooperative",
  "coordinated",
  "courageous",
  "cowardly",
  "crabby",
  "craven",
  "crazy",
  "creepy",
  "crooked",
  "crowded",
  "cruel",
  "cuddly",
  "cultured",
  "cumbersome",
  "curious",
  "curly",
  "curved",
  "curvy",
  "cut",
  "cute",
  "cynical",
  "daffy",
  "daily",
  "damaged",
  "damaging",
  "damp",
  "dangerous",
  "dapper",
  "dark",
  "dashing",
  "dazzling",
  "dead",
  "deadpan",
  "deafening",
  "dear",
  "debonair",
  "decisive",
  "decorous",
  "deep",
  "deeply",
  "defeated",
  "defective",
  "defiant",
  "delicate",
  "delicious",
  "delightful",
  "demonic",
  "delirious",
  "dependent",
  "depressed",
  "deranged",
  "descriptive",
  "deserted",
  "detailed",
  "determined",
  "devilish",
  "didactic",
  "different",
  "difficult",
  "diligent",
  "direful",
  "dirty",
  "disagreeable",
  "disastrous",
  "discreet",
  "disgusted",
  "disgusting",
  "disillusioned",
  "dispensable",
  "distinct",
  "disturbed",
  "divergent",
  "dizzy",
  "domineering",
  "doubtful",
  "drab",
  "draconian",
  "dramatic",
  "dreary",
  "drunk",
  "dry",
  "dull",
  "dusty",
  "dynamic",
  "dysfunctional",
  "eager",
  "early",
  "earsplitting",
  "earthy",
  "easy",
  "eatable",
  "economic",
  "educated",
  "efficacious",
  "efficient",
  "elastic",
  "elated",
  "elderly",
  "electric",
  "elegant",
  "elfin",
  "elite",
  "embarrassed",
  "eminent",
  "empty",
  "enchanted",
  "enchanting",
  "encouraging",
  "endurable",
  "energetic",
  "enormous",
  "entertaining",
  "enthusiastic",
  "envious",
  "equable",
  "equal",
  "erect",
  "erratic",
  "ethereal",
  "evanescent",
  "evasive",
  "even",
  "excellent",
  "excited",
  "exciting",
  "exclusive",
  "exotic",
  "expensive",
  "extra-large",
  "extra-small",
  "exuberant",
  "exultant",
  "fabulous",
  "faded",
  "faint",
  "fair",
  "faithful",
  "fallacious",
  "false",
  "familiar",
  "famous",
  "fanatical",
  "fancy",
  "fantastic",
  "far",
  "far-flung",
  "fascinated",
  "fast",
  "fat",
  "faulty",
  "fearful",
  "fearless",
  "feeble",
  "feigned",
  "female",
  "fertile",
  "festive",
  "few",
  "fierce",
  "filthy",
  "fine",
  "finicky",
  "first",
  "fixed",
  "flagrant",
  "flaky",
  "flashy",
  "flat",
  "flawless",
  "flimsy",
  "flippant",
  "flowery",
  "fluffy",
  "fluttering",
  "foamy",
  "foolish",
  "foregoing",
  "forgetful",
  "fortunate",
  "frail",
  "fragile",
  "frantic",
  "free",
  "freezing",
  "frequent",
  "fresh",
  "fretful",
  "friendly",
  "frightened",
  "frightening",
  "full",
  "fumbling",
  "functional",
  "funny",
  "furry",
  "furtive",
  "future",
  "futuristic",
  "fuzzy",
  "gabby",
  "gainful",
  "gamy",
  "gaping",
  "garrulous",
  "gaudy",
  "general",
  "gentle",
  "giant",
  "giddy",
  "gifted",
  "gigantic",
  "glamorous",
  "gleaming",
  "glib",
  "glistening",
  "glorious",
  "glossy",
  "godly",
  "good",
  "goofy",
  "gorgeous",
  "graceful",
  "grandiose",
  "grateful",
  "gratis",
  "gray",
  "greasy",
  "great",
  "greedy",
  "green",
  "grey",
  "grieving",
  "groovy",
  "grotesque",
  "grouchy",
  "grubby",
  "gruesome",
  "grumpy",
  "guarded",
  "guiltless",
  "gullible",
  "gusty",
  "guttural",
  "habitual",
  "half",
  "hallowed",
  "halting",
  "handsome",
  "handy",
  "hanging",
  "hapless",
  "happy",
  "hard",
  "hard-to-find",
  "harmonious",
  "harsh",
  "hateful",
  "heady",
  "healthy",
  "heartbreaking",
  "heavenly",
  "heavy",
  "hellish",
  "helpful",
  "helpless",
  "hesitant",
  "hideous",
  "high",
  "highfalutin",
  "high-pitched",
  "hilarious",
  "hissing",
  "historical",
  "holistic",
  "hollow",
  "homeless",
  "homely",
  "honorable",
  "horrible",
  "hospitable",
  "hot",
  "huge",
  "hulking",
  "humdrum",
  "humorous",
  "hungry",
  "hurried",
  "hurt",
  "hushed",
  "husky",
  "hypnotic",
  "hysterical",
  "icky",
  "icy",
  "idiotic",
  "ignorant",
  "ill",
  "illegal",
  "ill-fated",
  "ill-informed",
  "illustrious",
  "imaginary",
  "immense",
  "imminent",
  "impartial",
  "imperfect",
  "impolite",
  "important",
  "imported",
  "impossible",
  "incandescent",
  "incompetent",
  "inconclusive",
  "industrious",
  "incredible",
  "inexpensive",
  "infamous",
  "innate",
  "innocent",
  "inquisitive",
  "insidious",
  "instinctive",
  "intelligent",
  "interesting",
  "internal",
  "invincible",
  "irate",
  "irritating",
  "itchy",
  "jaded",
  "jagged",
  "jazzy",
  "jealous",
  "jittery",
  "jobless",
  "jolly",
  "joyous",
  "judicious",
  "juicy",
  "jumbled",
  "jumpy",
  "juvenile",
  "keen",
  "kind",
  "kindhearted",
  "kindly",
  "knotty",
  "knowing",
  "knowledgeable",
  "known",
  "labored",
  "lackadaisical",
  "lacking",
  "lame",
  "lamentable",
  "languid",
  "large",
  "last",
  "late",
  "laughable",
  "lavish",
  "lazy",
  "lean",
  "learned",
  "left",
  "legal",
  "lethal",
  "level",
  "lewd",
  "light",
  "like",
  "likeable",
  "limping",
  "literate",
  "little",
  "lively",
  "living",
  "lonely",
  "long",
  "longing",
  "long-term",
  "loose",
  "lopsided",
  "loud",
  "loutish",
  "lovely",
  "loving",
  "low",
  "lowly",
  "lucky",
  "ludicrous",
  "lumpy",
  "lush",
  "luxuriant",
  "lying",
  "lyrical",
  "macabre",
  "macho",
  "maddening",
  "madly",
  "magenta",
  "magical",
  "magnificent",
  "majestic",
  "makeshift",
  "male",
  "malicious",
  "mammoth",
  "maniacal",
  "many",
  "marked",
  "massive",
  "married",
  "marvelous",
  "material",
  "materialistic",
  "mature",
  "mean",
  "measly",
  "meaty",
  "medical",
  "meek",
  "mellow",
  "melodic",
  "melted",
  "merciful",
  "mere",
  "messy",
  "mighty",
  "military",
  "milky",
  "mindless",
  "miniature",
  "minor",
  "miscreant",
  "misty",
  "mixed",
  "moaning",
  "modern",
  "moldy",
  "momentous",
  "motionless",
  "mountainous",
  "muddled",
  "mundane",
  "murky",
  "mushy",
  "mute",
  "mysterious",
  "naive",
  "nappy",
  "narrow",
  "nasty",
  "natural",
  "naughty",
  "nauseating",
  "near",
  "neat",
  "nebulous",
  "necessary",
  "needless",
  "needy",
  "neighborly",
  "nervous",
  "new",
  "next",
  "nice",
  "nifty",
  "nimble",
  "nippy",
  "noiseless",
  "noisy",
  "nonchalant",
  "nondescript",
  "nonstop",
  "normal",
  "nostalgic",
  "nosy",
  "noxious",
  "numberless",
  "numerous",
  "nutritious",
  "nutty",
  "oafish",
  "obedient",
  "obeisant",
  "obese",
  "obnoxious",
  "obscene",
  "obsequious",
  "observant",
  "obsolete",
  "obtainable",
  "oceanic",
  "odd",
  "offbeat",
  "old",
  "old-fashioned",
  "omniscient",
  "onerous",
  "open",
  "opposite",
  "optimal",
  "orange",
  "ordinary",
  "organic",
  "ossified",
  "outgoing",
  "outrageous",
  "outstanding",
  "oval",
  "overconfident",
  "overjoyed",
  "overrated",
  "overt",
  "overwrought",
  "painful",
  "painstaking",
  "pale",
  "paltry",
  "panicky",
  "panoramic",
  "parallel",
  "parched",
  "parsimonious",
  "past",
  "pastoral",
  "pathetic",
  "peaceful",
  "penitent",
  "perfect",
  "periodic",
  "permissible",
  "perpetual",
  "petite",
  "phobic",
  "physical",
  "picayune",
  "pink",
  "piquant",
  "placid",
  "plain",
  "plant",
  "plastic",
  "plausible",
  "pleasant",
  "plucky",
  "pointless",
  "poised",
  "polite",
  "political",
  "poor",
  "possessive",
  "possible",
  "powerful",
  "precious",
  "premium",
  "present",
  "pretty",
  "previous",
  "pricey",
  "prickly",
  "private",
  "probable",
  "productive",
  "profuse",
  "protective",
  "proud",
  "psychedelic",
  "psychotic",
  "public",
  "puffy",
  "pumped",
  "puny",
  "purple",
  "purring",
  "pushy",
  "puzzled",
  "puzzling",
  "quaint",
  "quarrelsome",
  "questionable",
  "quick",
  "quiet",
  "quirky",
  "quixotic",
  "quizzical",
  "rabid",
  "racial",
  "ragged",
  "rainy",
  "rambunctious",
  "rampant",
  "rapid",
  "rare",
  "raspy",
  "ratty",
  "ready",
  "real",
  "rebel",
  "receptive",
  "recondite",
  "red",
  "redundant",
  "reflective",
  "regular",
  "relieved",
  "remarkable",
  "reminiscent",
  "repulsive",
  "resolute",
  "resonant",
  "responsible",
  "rhetorical",
  "rich",
  "right",
  "righteous",
  "rightful",
  "rigid",
  "ripe",
  "ritzy",
  "roasted",
  "robust",
  "romantic",
  "roomy",
  "rotten",
  "rough",
  "round",
  "royal",
  "ruddy",
  "rude",
  "rural",
  "rustic",
  "ruthless",
  "sable",
  "sad",
  "safe",
  "salty",
  "same",
  "sassy",
  "satisfying",
  "savory",
  "scandalous",
  "scarce",
  "scared",
  "scary",
  "scattered",
  "scientific",
  "scintillating",
  "scrawny",
  "screeching",
  "second",
  "second-hand",
  "secret",
  "secretive",
  "sedate",
  "seemly",
  "selective",
  "selfish",
  "separate",
  "serious",
  "shaggy",
  "shaky",
  "shallow",
  "sharp",
  "shiny",
  "shivering",
  "shocking",
  "short",
  "shrill",
  "shut",
  "shy",
  "sick",
  "silent",
  "silky",
  "silly",
  "simple",
  "simplistic",
  "sincere",
  "skillful",
  "skinny",
  "sleepy",
  "slim",
  "slimy",
  "slippery",
  "sloppy",
  "slow",
  "small",
  "smart",
  "smelly",
  "smiling",
  "smoggy",
  "smooth",
  "sneaky",
  "snobbish",
  "snotty",
  "soft",
  "soggy",
  "solid",
  "somber",
  "sophisticated",
  "sordid",
  "sore",
  "sour",
  "sparkling",
  "special",
  "spectacular",
  "spicy",
  "spiffy",
  "spiky",
  "spiritual",
  "spiteful",
  "splendid",
  "spooky",
  "spotless",
  "spotted",
  "spotty",
  "spurious",
  "squalid",
  "square",
  "squealing",
  "squeamish",
  "staking",
  "stale",
  "standing",
  "statuesque",
  "steadfast",
  "steady",
  "steep",
  "stereotyped",
  "sticky",
  "stiff",
  "stimulating",
  "stingy",
  "stormy",
  "straight",
  "strange",
  "striped",
  "strong",
  "stupendous",
  "sturdy",
  "subdued",
  "subsequent",
  "substantial",
  "successful",
  "succinct",
  "sudden",
  "sulky",
  "super",
  "superb",
  "superficial",
  "supreme",
  "swanky",
  "sweet",
  "sweltering",
  "swift",
  "symptomatic",
  "synonymous",
  "taboo",
  "tacit",
  "tacky",
  "talented",
  "tall",
  "tame",
  "tan",
  "tangible",
  "tangy",
  "tart",
  "tasteful",
  "tasteless",
  "tasty",
  "tawdry",
  "tearful",
  "tedious",
  "teeny",
  "teeny-tiny",
  "telling",
  "temporary",
  "ten",
  "tender",
  "tense",
  "tenuous",
  "terrific",
  "tested",
  "testy",
  "thankful",
  "therapeutic",
  "thick",
  "thin",
  "thinkable",
  "third",
  "thirsty",
  "thoughtful",
  "thoughtless",
  "threatening",
  "thundering",
  "tidy",
  "tight",
  "tightfisted",
  "tiny",
  "tired",
  "tiresome",
  "toothsome",
  "torpid",
  "tough",
  "towering",
  "tranquil",
  "trashy",
  "tremendous",
  "tricky",
  "trite",
  "troubled",
  "truculent",
  "true",
  "truthful",
  "typical",
  "ubiquitous",
  "ultra",
  "unable",
  "unaccountable",
  "unadvised",
  "unarmed",
  "unbecoming",
  "unbiased",
  "uncovered",
  "understood",
  "undesirable",
  "unequal",
  "unequaled",
  "uneven",
  "unhealthy",
  "uninterested",
  "unique",
  "unkempt",
  "unknown",
  "unnatural",
  "unruly",
  "unsightly",
  "unsuitable",
  "untidy",
  "unused",
  "unusual",
  "unwieldy",
  "unwritten",
  "upbeat",
  "uppity",
  "upset",
  "uptight",
  "used",
  "useful",
  "useless",
  "utopian",
  "vacuous",
  "vagabond",
  "vague",
  "valuable",
  "various",
  "vast",
  "vengeful",
  "venomous",
  "verdant",
  "versed",
  "victorious",
  "vigorous",
  "violent",
  "violet",
  "vivacious",
  "voiceless",
  "volatile",
  "voracious",
  "vulgar",
  "wacky",
  "waggish",
  "waiting",
  "wakeful",
  "wandering",
  "wanting",
  "warlike",
  "warm",
  "wary",
  "wasteful",
  "watery",
  "weak",
  "wealthy",
  "weary",
  "well-groomed",
  "well-made",
  "well-off",
  "well-to-do",
  "wet",
  "whimsical",
  "whispering",
  "white",
  "whole",
  "wholesale",
  "wicked",
  "wide",
  "wide-eyed",
  "wiggly",
  "wild",
  "willing",
  "windy",
  "wiry",
  "wise",
  "wistful",
  "witty",
  "woebegone",
  "womanly",
  "wonderful",
  "wooden",
  "woozy",
  "workable",
  "worried",
  "worthless",
  "wrathful",
  "wretched",
  "wrong",
  "wry",
  "yellow",
  "yielding",
  "young",
  "youthful",
  "yummy",
  "zany",
  "zealous",
  "zesty",
  "zippy",
  "zonked",
];

await userSeeder();

console.log(tokens);
const responsesSeeder = async () => {
  try {
    for (let i = 1; i < 5; i++) {
      for (let j = 0; j < tokens.length * 10; j++) {
        const sax = await fetch(
          `${API_URL}/gig/${Math.round(
            Math.random() * 20
          )}/addUser/${tokens[i].id}/saxophone`,
          {
            method: "POST",
            mode: "cors",
            headers: {
              "Content-type": "application/json",
              Authorization: tokens[i].sessionToken,
            },
          }
        );
        const drums = await fetch(
          `${API_URL}/gig/${Math.round(
            Math.random() * 20
          )}/addUser/${tokens[i].id}/drums`,
          {
            method: "POST",
            mode: "cors",
            headers: {
              "Content-type": "application/json",
              Authorization: tokens[i].sessionToken,
            },
          }
        );
        const accordian = await fetch(
          `${API_URL}/gig/${Math.round(
            Math.random() * 20
          )}/addUser/${tokens[i].id}/accordian`,
          {
            method: "POST",
            mode: "cors",
            headers: {
              "Content-type": "application/json",
              Authorization: tokens[i].sessionToken,
            },
          }
        );
        const sax2 = await fetch(
          `${API_URL}/gig/${Math.round(
            Math.random() * 20
          )}/decline/${tokens[i].id}/saxophone`,
          {
            method: "POST",
            mode: "cors",
            headers: {
              "Content-type": "application/json",
              Authorization: tokens[i].sessionToken,
            },
          }
        );
        const drums2 = await fetch(
          `${API_URL}/gig/${Math.round(
            Math.random() * 20
          )}/decline/${tokens[i].id}/drums`,
          {
            method: "POST",
            mode: "cors",
            headers: {
              "Content-type": "application/json",
              Authorization: tokens[i].sessionToken,
            },
          }
        );
        const accordian2 = await fetch(
          `${API_URL}/gig/${Math.round(
            Math.random() * 20
          )}/decline/${tokens[i].id}/accordian`,
          {
            method: "POST",
            mode: "cors",
            headers: {
              "Content-type": "application/json",
              Authorization: tokens[i].sessionToken,
            },
          }
        );
        const jsons = await Promise.all([
          accordian.json(),
          sax.json(),
          drums.json(),
          accordian2.json(),
          sax2.json(),
          drums2.json(),
        ]);
        console.log(i, j);
      }
    }
  } catch (err) {
    console.log(err);
  } finally {
    console.log("✔✔✔ responsesSeeder complete");
  }
};
await responsesSeeder();

const leaderSeeder = async () => {
  try {
    const body = {
      email: "leader1@gmail.com",
      password: "password",
    };
    const userResults = await fetch(`${API_URL}/user/signup`, {
      method: "POST",
      mode: "cors",
      body: JSON.stringify(body),
      headers: {
        "Content-type": "application/json",
      },
    });
    const userJson = await userResults.json();
    const { sessionToken, user } = userJson;

    const profile = await fetch(`${API_URL}/user/profile`, {
      method: "PUT",
      mode: "cors",
      body: JSON.stringify({
        name: "Nick Tucker",
        role: "Bass",
        description:
          `Playing bass since age 15, Nick is top 
          call bassist in Indinapolis's music scene!`,
        location: "Indianapolis, IN",
        paymentPreference: {
          zelle: "3175138076",
          venmo: "nick-tucker-12",
          cashApp: "$nicktuckerbass",
        },
        specialties: ["Jazz", "Hip-hop", "Top 40"],
      }),
      headers: {
        "Content-type": "application/json",
        Authorization: sessionToken,
      },
    });

    const profileJson = await profile.json()
    // console.log(userJson);
    const gigBody = {
      description: "Recital",
      date: "2022-03-22 18:30:00.543-04",
      payment: 400,
      location: "Carnegie Hall",
      optionalInfo: {
        attire: "Formal",
        meal: "Surf and turf",
        rehearsal: "day-of",
      },
    };
    const stackBody = {
      stackTable: {
        saxophone: [
          "user3@email.com",
          "sax1@gmail.com",
          "sax1@gmail.com",
          "sax1@gmail.com",
          "sax2@gmail.com",
        ],
        drums: [
          "user1@email.com",
          "user2@email.com",
          "drums1@gmail.com",
          "drums1@gmail.com",
          "drums1@gmail.com",
          "drums1@gmail.com",
          "drums2@gmail.com",
        ],
        accordian: ["yourOwnAccordian@email.me"],
      },
    };

    const gigResults = await fetch(`${API_URL}/gig/`, {
      method: "POST",
      mode: "cors",
      body: JSON.stringify(gigBody),
      headers: {
        "Content-type": "application/json",
        Authorization: sessionToken,
      },
    });
    const gigJson = await gigResults.json();
    // console.log(gigJson.newGig);

    const gigId = gigJson.newGig.id;

    const callStackResults = await fetch(
      `${API_URL}/gig/${gigId}/callStack`,
      {
        method: "POST",
        mode: "cors",
        body: JSON.stringify(stackBody),
        headers: {
          "Content-type": "application/json",
          Authorization: sessionToken,
        },
      }
    );
    const stackJson = await callStackResults.json();
    const addRoleFetch = await fetch(
      `${API_URL}/gig/${gigId}/callStack/addRole/harmonica`,
      {
        method: "POST",
        mode: "cors",
        body: JSON.stringify({
          calls: ["johs1d6@email.com", "kipp0@boob.gov"],
        }),
        headers: {
          "Content-type": "application/json",
          Authorization: sessionToken,
        },
      }
    );

    const addRoleJson = await addRoleFetch.json();

    const addUserFetch = await fetch(
      `
  ${API_URL}/gig/${gigId}/callStack/addUser/harmonica/daddy-O@email.com
  `,
      {
        method: "POST",
        mode: "cors",
        headers: {
          "Content-type": "application/json",
          Authorization: sessionToken,
        },
      }
    );
    const addUserJson = await addUserFetch.json();

    const openAcceptAccordian = await fetch(
      `
  ${API_URL}/open/${gigId}/addUser/${hashSync(
        "yourOwnAccordian@email.me",
        10
      ).replace(/\//g, "slash")}/accordian
  `,
      {
        method: "POST",
        mode: "cors",
        headers: {
          "Content-type": "application/json",
        },
      }
    );
    const accAccJson = await openAcceptAccordian.json();

    const openDeclineHarmonica = await fetch(
      `
  ${API_URL}/open/${gigId}/decline/${hashSync(
        "johs1d6@email.com",
        10
      ).replace(/\//g, "slash")}/harmonica
  `,
      {
        method: "POST",
        mode: "cors",
        headers: {
          "Content-type": "application/json",
        },
      }
    );
    const decHarmJson = await openDeclineHarmonica.json();

    const openAcceptHarmonica = await fetch(
      `
  ${API_URL}/open/${gigId}/addUser/${hashSync(
        "kipp0@boob.gov",
        10
      ).replace(/\//g, "slash")}/harmonica
  `,
      {
        method: "POST",
        mode: "cors",
        headers: {
          "Content-type": "application/json",
        },
      }
    );

    const accHarmJson = await openAcceptHarmonica.json();

    const acceptSax = await fetch(
      `${API_URL}/gig/${gigId}/addUser/3/saxophone`,
      {
        method: "POST",
        mode: "cors",
        headers: {
          "Content-type": "application/json",
          Authorization: tokenHash["3"],
        },
      }
    );

    const accSaxJson = await acceptSax.json();

    const declineDrums = await fetch(
      `
  ${API_URL}/gig/${gigId}/decline/1/drums
  `,
      {
        method: "POST",
        mode: "cors",
        headers: {
          "Content-type": "application/json",
          Authorization: tokenHash["1"],
        },
      }
    );
    const decDrumJson = await declineDrums.json();

    const acceptDrums = await fetch(
      `${API_URL}/gig/${gigId}/addUser/2/drums`,
      {
        method: "POST",
        mode: "cors",
        headers: {
          "Content-type": "application/json",
          Authorization: tokenHash["2"],
        },
      }
    );

    const accDrumJson = await acceptDrums.json();

    const gigInfo = await fetch(`${API_URL}/gig/${gigId}`,{
      method: "GET",
        mode: "cors",
        headers: {
          "Content-type": "application/json",
          Authorization: sessionToken
        },
    })
    const gigInfoJson = await gigInfo.json()

    const user2offers = await fetch(`${API_URL}/user/offers`, {
      method: "GET",
        mode: "cors",
        headers: {
          "Content-type": "application/json",
          Authorization: tokenHash["2"],
        },
    })
    const offersJson = await user2offers.json()

    console.log("create user status: ", userJson.message);
    console.log("update profile status: ", profileJson.message);
    console.log("create callstack status: ", stackJson.message);
    console.log("add role status: ", addRoleJson.message);
    console.log("add user to callstack status: ", addUserJson.message);
    console.log("accAccJson status: ", accAccJson.message);
    console.log("accDrumJson status: ", accDrumJson.message);
    console.log("decDrumJson status: ", decDrumJson.message);
    console.log("accSaxJson status: ", accSaxJson.message);
    console.log("accHarmJson status: ", accHarmJson.message);
    console.log("decHarmJson status: ", decHarmJson.message);
    console.log("gig info status: ", gigInfoJson.message)
    console.log("offers endpoint status: ", offersJson.offers.rows)

  } catch (err) {
    console.log(err);
  } finally {
    console.log("✔✔✔ leader seeder finished");
  }
};


await leaderSeeder();
